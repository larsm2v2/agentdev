services:
  # Email Librarian Main Service
  email-librarian:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: email-librarian-server
    ports:
      - "8000:8000"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "oauth2.googleapis.com:74.125.21.95"
      - "accounts.google.com:192.0.0.88"
      - "www.googleapis.com:74.125.21.95"
      - "googleapis.com:74.125.21.95"
      - "oauth2.googleapis.com:74.125.138.95"
      - "www.googleapis.com:142.251.15.95"
      - "gmail.googleapis.com:74.125.21.95"
      - "gmail.googleapis.com:142.251.15.95"
      - "googleapis.com:172.253.124.106"
      - "googleapis.com:172.253.124.104"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=email_librarian
      - POSTGRES_USER=librarian_user
      - POSTGRES_PASSWORD=secure_password_2024
      - DATABASE_URL=postgresql://librarian_user:secure_password_2024@postgres:5432/email_librarian
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - N8N_BASE_URL=http://n8n:5678
      - REDIS_URL=redis://redis:6379/0
      - LANGFUSE_HOST=https://cloud.langfuse.com
      - LOG_LEVEL=INFO
      # Gmail credentials paths (files mounted via volumes)
      - GMAIL_CREDENTIALS_PATH=/app/config/credentials.json
      - GMAIL_TOKEN_PATH=/app/data/gmail_token.pickle
    volumes:
      - ./config:/app/config:ro # Read-only for security
      - ./logs:/app/logs
      - ./data:/app/data # Read-write for token updates
      - email-cache:/app/email_cache
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - email_librarian_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: email_librarian_postgres
    environment:
      POSTGRES_DB: email_librarian
      POSTGRES_USER: librarian_user
      POSTGRES_PASSWORD: secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U librarian_user -d email_librarian"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - email_librarian_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: email_librarian_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - email_librarian_network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: email_librarian_n8n
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=librarian_user
      - DB_POSTGRESDB_PASSWORD=secure_password_2024
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_SECURE_COOKIE=false
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5678/healthz",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - email_librarian_network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: email_librarian_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - email_librarian_network

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: email_librarian_redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=redis_password_2024
      - REDIS_EXPORTER_LOG_FORMAT=txt
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - email_librarian_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9121"
      - "prometheus.io/path=/metrics"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: email_librarian_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - email_librarian_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: email_librarian_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - email_librarian_network

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  n8n_data:
    driver: local
  redis_data:
    driver: local
  email_librarian_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  email-cache:
    driver: local

networks:
  email_librarian_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
