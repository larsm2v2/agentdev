src\core\enhanced_email_librarian_server.py:108:__init__:internal:meaningful=3:total=3:todo=False:ellipsis=False:has_pass=False
  preview: def __init__(self, name, description):\nself.name = name\nself.description = description

src\core\enhanced_email_librarian_server.py:240:get_mock_gmail_labels:internal:meaningful=3:total=4:todo=False:ellipsis=False:has_pass=False
  preview: def get_mock_gmail_labels():\nmock_labels = get_mock_gmail_labels()\n

src\core\enhanced_email_librarian_server.py:246:__init__:internal:meaningful=95:total=148:todo=True:ellipsis=True:has_pass=False
  preview: def __init__(self):\n# Create lifespan context manager first\n@asynccontextmanager

src\core\enhanced_email_librarian_server.py:392:_init_gmail_organizers_on_startup:route:meaningful=2:total=2:todo=False:ellipsis=False:has_pass=False
  preview: async def _init_gmail_organizers_on_startup():\nawait self.initialize_gmail_organizers()

src\core\enhanced_email_librarian_server.py:447:_authenticate_gmail_direct:internal:meaningful=38:total=51:todo=False:ellipsis=True:has_pass=False
  preview: def _authenticate_gmail_direct(self):\n"""Direct Gmail API authentication - minimal dependencies"""\ntry:

src\core\enhanced_email_librarian_server.py:499:initialize_gmail_organizers:internal:meaningful=24:total=31:todo=False:ellipsis=True:has_pass=False
  preview: async def initialize_gmail_organizers(self):\n\ntry:

src\core\enhanced_email_librarian_server.py:530:_initialize_high_performance_organizer:internal:meaningful=15:total=15:todo=False:ellipsis=True:has_pass=False
  preview: def _initialize_high_performance_organizer(self, gmail_credentials_path):\ntry:\nprint("âš¡ Initializing HighPerformanceGmailOrganizer...")

src\core\enhanced_email_librarian_server.py:546:_initialize_cost_optimized_organizer:internal:meaningful=14:total=14:todo=False:ellipsis=True:has_pass=False
  preview: def _initialize_cost_optimized_organizer(self, gmail_credentials_path):\ntry:\nprint("ðŸ’° Initializing cost-optimized organizer (using GmailAIOrganizer)...")

src\core\enhanced_email_librarian_server.py:560:_fallback_to_basic_organizer:internal:meaningful=15:total=15:todo=False:ellipsis=True:has_pass=False
  preview: def _fallback_to_basic_organizer(self, gmail_credentials_path):\nif not self.hp_organizer and not self.gmail_organizer:\ntry:

src\core\enhanced_email_librarian_server.py:638:get_email_tools:internal:meaningful=27:total=39:todo=False:ellipsis=True:has_pass=False
  preview: def get_email_tools(self) -> List[Any]:\n"""Create custom tools for email processing agents"""\n# Use module-level BaseTool (imported or fallback defined at module import time)

src\core\enhanced_email_librarian_server.py:644:__init__:internal:meaningful=5:total=5:todo=False:ellipsis=False:has_pass=False
  preview: def __init__(self):\nsuper().__init__(\nname="vector_search",

src\core\enhanced_email_librarian_server.py:650:_run:internal:meaningful=2:total=3:todo=False:ellipsis=False:has_pass=False
  preview: def _run(self, query: str, limit: int = 5) -> str:\n# This would be implemented with async wrapper\nreturn f"Found {limit} similar emails for query: {query}"

src\core\enhanced_email_librarian_server.py:655:__init__:internal:meaningful=5:total=5:todo=False:ellipsis=False:has_pass=False
  preview: def __init__(self):\nsuper().__init__(\nname="category_prediction",

src\core\enhanced_email_librarian_server.py:661:_run:internal:meaningful=2:total=3:todo=False:ellipsis=False:has_pass=False
  preview: def _run(self, email_content: str, context: str = "") -> str:\n# Implement category prediction logic\nreturn "predicted_category"

src\core\enhanced_email_librarian_server.py:666:__init__:internal:meaningful=5:total=5:todo=False:ellipsis=False:has_pass=False
  preview: def __init__(self):\nsuper().__init__(\nname="trigger_n8n_workflow",

src\core\enhanced_email_librarian_server.py:672:_run:internal:meaningful=2:total=3:todo=False:ellipsis=False:has_pass=False
  preview: def _run(self, workflow_id: str, data: dict) -> str:\n# Trigger n8n workflow\nreturn f"Workflow {workflow_id} triggered with data"

src\core\enhanced_email_librarian_server.py:678:setup_database:internal:meaningful=11:total=14:todo=False:ellipsis=True:has_pass=False
  preview: async def setup_database(self):\n"""Initialize database and create tables"""\nlogger.info("Attempting to connect to database...")

src\core\enhanced_email_librarian_server.py:719:setup_routes:internal:meaningful=1290:total=1653:todo=True:ellipsis=True:has_pass=False
  preview: def setup_routes(self):\n"""\nRegister all major API endpoints for the Enhanced Email Librarian server.

src\core\enhanced_email_librarian_server.py:1107:vector_search:route:meaningful=23:total=27:todo=True:ellipsis=False:has_pass=False
  preview: async def vector_search(request: VectorSearchRequest):\n"""Search emails using vector similarity"""\ntry:

src\core\enhanced_email_librarian_server.py:1855:get_gmail_categories:route:meaningful=99:total=127:todo=False:ellipsis=True:has_pass=False
  preview: async def get_gmail_categories():\n"""Retrieve current Gmail labels/categories with 1 API call - Container Compatible"""\ntry:

src\core\enhanced_email_librarian_server.py:2446:process_shelving_job:internal:meaningful=22:total=30:todo=False:ellipsis=True:has_pass=False
  preview: async def process_shelving_job(self, job_id: str, parameters: dict) -> dict:\n"""HIGH PERFORMANCE shelving job using Fast Gmail Organizer with all optimizations"""\ntry:

src\core\enhanced_email_librarian_server.py:2604:_process_with_basic_organizer:internal:meaningful=72:total=98:todo=True:ellipsis=False:has_pass=False
  preview: async def _process_with_basic_organizer(self, job_id: str, parameters: dict) -> dict:\n"""Fallback processing using basic Gmail organizer"""\ntry:

src\core\enhanced_email_librarian_server.py:2743:process_reclassification_job:internal:meaningful=9:total=10:todo=True:ellipsis=False:has_pass=False
  preview: async def process_reclassification_job(self, job_id: str, parameters: dict) -> dict:\n"""Process email reclassification job"""\nlogger.info(f"Processing reclassification job {job_id} with parameters: {parameters}")

src\core\enhanced_email_librarian_server.py:2844:update_job_status_stub:internal:meaningful=2:total=4:todo=True:ellipsis=False:has_pass=True
  preview: async def update_job_status_stub(self, job_id: str, status: str, result: Any = None, error_message: Optional[str] = None):\n"""Stub for update job status in database (legacy, not used)"""\n# Implementation would update PostgreSQL record

src\core\enhanced_email_librarian_server.py:2849:update_agent_execution:internal:meaningful=2:total=4:todo=True:ellipsis=False:has_pass=True
  preview: async def update_agent_execution(self, execution_id: str, status: str, result: Any = None, trace_id: Optional[str] = None):\n"""Update agent execution status"""\n# Implementation would update PostgreSQL record

src\core\enhanced_email_librarian_server.py:2884:handle_websocket_message:internal:meaningful=7:total=10:todo=True:ellipsis=False:has_pass=True
  preview: async def handle_websocket_message(self, websocket: WebSocket, data: str):\n"""Handle incoming WebSocket messages"""\ntry:

src\core\enhanced_email_librarian_server.py:2925:start_continuous_shelving:internal:meaningful=134:total=184:todo=True:ellipsis=True:has_pass=False
  preview: async def start_continuous_shelving(self, job_id: str):\n"""Start continuous email shelving process"""\nlogger.info(f"ðŸš€ Starting continuous shelving process for job {job_id}")

src\core\enhanced_email_librarian_server.py:3479:_get_content_hash:internal:meaningful=5:total=5:todo=False:ellipsis=False:has_pass=False
  preview: def _get_content_hash(self, email_data: Dict) -> str:\n"""Generate hash for email content for caching"""\nimport hashlib

src\core\enhanced_email_librarian_server.py:3564:_create_batch_classification_prompt:internal:meaningful=32:total=42:todo=False:ellipsis=True:has_pass=False
  preview: def _create_batch_classification_prompt(self, emails: List[Dict]) -> str:\n"""Create optimized batch classification prompt"""\nif not hasattr(self, 'categories') or not self.categories:

src\core\enhanced_email_librarian_server.py:3876:main:internal:meaningful=3:total=4:todo=False:ellipsis=False:has_pass=False
  preview: def main():\n"""Main entry point"""\n# Create and return app instance for uvicorn

